* Advent of Code (aoc) solutions

  In this directory I have solutions for [[https://adventofcode.com/][Advent of Code]] problems.

  The ~inputs~ directory has unmodified inputs for problems that I have solved.

* 2019 Day 1: The Tyranny of the Rocket Equation

  Original Puzzle: https://adventofcode.com/2019/day/1

  My simplified rewrite of the requirements as I understand them follows:

** Part 1

   Fuel required to launch a given module is based on its mass. The fuel
   required is given by mass: ~f(m) = floor(m / 3) - 2~ where ~m~ is for mass.

   For example:

   #+begin_src
   f(12) = 2
   f(14) = 2
   f(1969) = 654
   f(100756) = 33583
   #+end_src

   What is the sum of the fuel requirements for all of the modules on your
   spacecraft?

** Part 2

   Include additional fuel for the fuel you just added. To calculate the fuel
   correctly repeatedly apply the calculation for the fuel of the fuel until it
   zero or negative.

   Find the total fuel for all the modules. For each module mass, calculate its
   fuel and add it to the total. Calculate the fuel requirements for each module
   separately, then add them all up at the end.

   For the following examples ~g(m)~ represents the new calculation function:

   #+begin_example
   g(14) = 2
   g(1969) = 654 + 216 + 70 + 21 + 5 = 966
   g(100756) = 33583 + 11192 + 3728 + 1240 + 411 + 135 + 43 + 12 + 2 = 50346.
   #+end_example

* 2019 Day 2: 1202 Program Alarm

  Original Puzzle: https://adventofcode.com/2019/day/1

  My simplified rewrite of the requirements as I understand them follows:

** Part 1

   Build a int-code computer that computes a program which is given as a list of
   integers separated by commas (like 1,0,0,3,99).

   The list is zero-indexed so a program such as ~1,0,0,3,99~ has ~1~ at index
   or position 0 etc:

   #+begin_src
   ---------> index 0
   | -------> index 1
   | | -----> index 2
   | | | ---> index 3
   | | | | -> index 4
   | | | | |
   1,0,0,3,99
   #+end_src

   The computer runs through the program from the beginning to the end operating
   on at 4 values at a time. The first value is the opcode and the next 3 are
   operands. The following labels the opcodes and operands from the example
   above:

   #+begin_src
   ---------> opcode
   | -------> operand
   | | -----> operand
   | | | ---> operand
   | | | | -> opcode
   | | | | |
   1,0,0,3,99
   #+end_src

   The following table shows the possible opcodes:

   |    opcode | description      |
   |-----------+------------------|
   |         1 | add              |
   |         2 | multiply         |
   |        99 | halt the program |
   | otherwise | error            |

   - The ~1~ opcode adds uses the next 3 operands as indexes into the entire
     program. The first and second operand provides the index of two values to
     add together. The third operand provides the index the store the result.

     For example in ~1,0,0,3~ the first value is the opcode for addition. The
     next 2 values are indexes of the values to add. They are both index 0; the
     value at index 0 is 1. Therefore, the result is 2 (1 + 1 = 2). The third
     value is the operand that gives the index where to store the result (index
     3; the same index as the current operand). Therefore, this will change the
     program from ~1,0,0,3~ to ~1,0,0,2~.

   - The ~2~ opcode is exactly the same as opcode 1, but the values are
     multiplied instead of adding.

   - The ~99~ opcode instructs the program to halt the program and uses no
     operands.

   Here are the initial and final states of a few more small programs:

   #+begin_src
    1,0,0,0,99 becomes 2,0,0,0,99 (1 + 1 = 2).
    2,3,0,3,99 becomes 2,3,0,6,99 (3 * 2 = 6).
    2,4,4,5,99,0 becomes 2,4,4,5,99,9801 (99 * 99 = 9801).
    1,1,1,4,99,5,6,0,99 becomes 30,1,1,4,2,5,6,0,99.
   #+end_src

   Once you have a working computer, the first step is to restore the gravity
   assist program (your puzzle input) to the "1202 program alarm" state it had
   just before the last computer caught fire. To do this, before running the
   program, replace position 1 with the value 12 and replace position 2 with the
   value 2. What value is left at position 0 after the program halts?


** Part 2

   Part 2 defines a bunch of terminology. The important bits are that the value
   at position 0 in memory is called "output", position 1 is called "noun", and
   position 2 is called "verb". Noun and verb have possible values on interval
   [0, 99].

   Determine what pair of nouns and verbs produces the output 19690720. For that
   noun and verb pair, what is 100 * noun + verb?
* 2019 Day 3: Crossed Wires
** Part 1

#+begin_quote
The gravity assist was successful, and you're well on your way to the Venus
refuelling station. During the rush back on Earth, the fuel management system
wasn't completely installed, so that's next on the priority list.

Opening the front panel reveals a jumble of wires. Specifically, two wires are
connected to a central port and extend outward on a grid. You trace the path
each wire takes as it leaves the central port, one wire per line of text (your
puzzle input).

The wires twist and turn, but the two wires occasionally cross paths. To fix the
circuit, you need to find the intersection point closest to the central port.
Because the wires are on a grid, use the Manhattan distance for this
measurement. While the wires do technically cross right at the central port
where they both start, this point does not count, nor does a wire count as
crossing with itself.

For example, if the first wire's path is R8,U5,L5,D3, then starting from the
central port (o), it goes right 8, up 5, left 5, and finally down 3:

...........
...........
...........
....+----+.
....|....|.
....|....|.
....|....|.
.........|.
.o-------+.
...........

Then, if the second wire's path is U7,R6,D4,L4, it goes up 7, right 6, down 4,
and left 4:

...........
.+-----+...
.|.....|...
.|..+--X-+.
.|..|..|.|.
.|.-X--+.|.
.|..|....|.
.|.......|.
.o-------+.
...........

These wires cross at two locations (marked X), but the lower-left one is closer
to the central port: its distance is 3 + 3 = 6.

Here are a few more examples:

    R75,D30,R83,U83,L12,D49,R71,U7,L72
    U62,R66,U55,R34,D71,R55,D58,R83 = distance 159
    R98,U47,R26,D63,R33,U87,L62,D20,R33,U53,R51
    U98,R91,D20,R16,D67,R40,U7,R15,U6,R7 = distance 135

What is the Manhattan distance from the central port to the closest intersection?
#+end_quote

** Part 2

#+begin_quote
It turns out that this circuit is very timing-sensitive; you actually need to
minimize the signal delay.

To do this, calculate the number of steps each wire takes to reach each
intersection; choose the intersection where the sum of both wires' steps is
lowest. If a wire visits a position on the grid multiple times, use the steps
value from the first time it visits that position when calculating the total
value of a specific intersection.

The number of steps a wire takes is the total number of grid squares the wire
has entered to get to that location, including the intersection being
considered. Again consider the example from above:

...........
.+-----+...
.|.....|...
.|..+--X-+.
.|..|..|.|.
.|.-X--+.|.
.|..|....|.
.|.......|.
.o-------+.
...........

In the above example, the intersection closest to the central port is reached
after 8+5+5+2 = 20 steps by the first wire and 7+6+4+3 = 20 steps by the second
wire for a total of 20+20 = 40 steps.

However, the top-right intersection is better: the first wire takes only 8+5+2 =
15 and the second wire takes only 7+6+2 = 15, a total of 15+15 = 30 steps.

Here are the best steps for the extra examples from above:

    R75,D30,R83,U83,L12,D49,R71,U7,L72
    U62,R66,U55,R34,D71,R55,D58,R83 = 610 steps
    R98,U47,R26,D63,R33,U87,L62,D20,R33,U53,R51
    U98,R91,D20,R16,D67,R40,U7,R15,U6,R7 = 410 steps

    What is the fewest combined steps the wires must take to reach an intersection?
#+end_quote

* 2019 Day 4: Secure Container

** Part 1

#+begin_quote
You arrive at the Venus fuel depot only to discover it's protected by a
password. The Elves had written the password on a sticky note, but someone threw
it out.

However, they do remember a few key facts about the password:

- It is a six-digit number.

- The value is within the range given in your puzzle input.

- Two adjacent digits are the same (like 22 in 122345).

- Going from left to right, the digits never decrease; they only ever increase
  or stay the same (like 111123 or 135679).

Other than the range rule, the following are true:

- 111111 meets these criteria (double 11, never decreases).
- 223450 does not meet these criteria (decreasing pair of digits 50).
- 123789 does not meet these criteria (no double).

How many different passwords within the range given in your puzzle input meet
these criteria?

Your puzzle input is 130254-678275.
#+end_quote

** Part 2

#+begin_quote
An Elf just remembered one more important detail: the two adjacent matching
digits are not part of a larger group of matching digits.

Given this additional criterion, but still ignoring the range rule, the
following are now true:

- 112233 meets these criteria because the digits never decrease and all repeated
  digits are exactly two digits long.

- 123444 no longer meets the criteria (the repeated 44 is part of a larger group
  of 444).

- 111122 meets the criteria (even though 1 is repeated more than twice, it still
  contains a double 22).

How many different passwords within the range given in your puzzle input meet
all of the criteria?

Your puzzle input is still 130254-678275.
#+end_quote
